"""
    1、模块是什么：
        模块就是一个以 '.py' 结尾的 Python 文件，模块中定义了类、方法、变量等，我们导入对应的模块就可以使用它们；

    2、模块的引入：
        [from 模块名] import [模块 | 类 | 变量 | 函数 | *] [as 别名]

    3、模块的导入的注意点：
        01）使用 . 来区分调用层级；
        02）使用 from 导入的好处是在使用时省略模块这个层级，例如：模块.方法() -> 方法()
        03）使用 as 可以给 引入的内容其别名；
        04）模块的引入一般写在文件的开头；

    4、__main__ 变量
        01）如果在当前模块中调用了方法，那么当别的模块导入当前模块时，当值模块中调用的方法会被自动执行；
        02）可以通过 if __name__ == '__main__': 进行限制；
        03）__name__ 为 Python 的一个内置变量，当模块模块执行 'run' 操作时，当前模块中的 __name__ 的值会被置为 __main__；

    5、__all__
        01）使用 import * 时 可以导入某个包下的所有某块或导入某个模块下的所有内容（方法/函数等）；
        02）使用 __all__ 变量可以设置某个包只能导入指定的模块，某个模块指定导入指定的内容（方法/函数等）；

"""


# 导入指定模块（使用时需要带上模块名）
import time
var01 = time.time()    # 模块名.方法名()
print(f"导入指定模块（使用时需要带上模块名），获取当前毫秒值：{var01}")


# 导入指定模块（使用时不用带上模块名）
from time import *
var01 = time()    # 模块名.方法名()
print(f"导入指定模块（使用时不用带上模块名），获取当前毫秒值：{var01}")


# 导入指定模块中的指定类
from datetime import date
var02 = date.today()    # 类名.方法名()
print(f"当前日期为：{var02}")


# 导入指定模块中的指定类，同时其起别名
from datetime import date as d
var02 = d.today()    # 类名.方法名()
print(f"当前日期为：{var02}")

# __main__ 变量的作用
if __name__ == '__main__':
    print(1)

